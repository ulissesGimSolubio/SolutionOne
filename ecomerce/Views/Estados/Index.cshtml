@model IEnumerable<Ecomerce.Models.Estado>

@{
    ViewData["Title"] = "Estados";
    int itensPorPaginaInt = Convert.ToInt32(ViewData["itensPorPagina"]);
    var paginas = Ecomerce.Extensions.ConfigurationValuesDefaults.Pagination;
    var count = Convert.ToInt32(ViewData["count"]);
    string busca = ViewData["busca"] as string ?? "";
    @* ativos ou não *@
    var ativo = (bool)(ViewData["ativo"] ?? true);
    var msgDelete = TempData["delete"] as string;
    var msgSave = TempData["save"] as string;
    var msgUpdate = TempData["update"] as string;
    var exception = TempData["exception"] as string;
}

<h1><i class="fa-solid fa-map"></i> Estados</h1>

<br />

<a class="btn btn-dark" asp-area="" title="Efetue o registro de uma nova Cidade, mas lembre-se, para uma Cidade você precisa de um estado para vincular." asp-controller="Cidades" asp-action="Index"><i class="fa-solid fa-signs-post"></i> &nbsp; Nova Cidade</a>
<a asp-action="Create" class="btn btn-dark" title="Efetue o registro de um novo Estado, mas lembre-se, para um Estado você precisa de um país para vincular."><i class="fa-solid fa-map"></i> &nbsp; Novo Estado</a>
<a class="btn btn-dark" asp-area="" title="Efetue o registro de um novo Pais." asp-controller="Paises" asp-action="Index"><i class="fa-solid fa-globe"></i> &nbsp; Novo Pais</a>


<br />
<br />

@if (msgDelete != null)
{
    <div id="alert" class="alert alert-danger" role="alert">
        &#128721 @msgDelete@exception
    </div>

    <script>
        // Fecha o alerta após 5 segundos
        setTimeout(function () {
            $('#alert').fadeOut('slow');
        }, 5000);
    </script>
}

@if (msgSave != null || msgUpdate != null)
{
    <div id="alert" class="alert alert-secondary" role="alert">
        <i class="fa-solid fa-check-to-slot"></i> @msgSave@msgUpdate
    </div>

    <script>
        // Fecha o alerta após 5 segundos
        setTimeout(function () {
            $('#alert').fadeOut('slow');
        }, 5000);
    </script>
}

@* Componente de paginação e pesquisa *@

<div class="d-flex justify-content-end">

    @* Componente de pesquisa *@
    @await Component.InvokeAsync("SearchForm", new { itensPorPagina = itensPorPaginaInt, paginas = paginas, busca = busca, ativo = (bool)(ViewData["ativo"] ?? true) })

</div>

<br />

@* Tabela com os dados *@

<div class="table-responsive">

    <table class="table table-striped">

        <thead>
            <tr>
                <th title="Sigla que corresponde ao Estado." class="col-md-2">
                    <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="EstadoSigla">
                        @Html.DisplayNameFor(model => model.EstadoSigla)
                        <span class="sort-icon"></span>
                    </a>
                </th>
                <th title="Nome de identificação do Estado." class="col-md-4">
                    <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="EstadoNome">
                        @Html.DisplayNameFor(model => model.EstadoNome)
                        <span class="sort-icon"></span>
                    </a>
                </th>
                <th title="Nome do Pais que o Estado faz parte." class="col-md-3">
                    <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="Pais">
                        @Html.DisplayNameFor(model => model.Pais)
                        <span class="sort-icon"></span>
                    </a>
                </th>
                <th title="Status se o registro está ativo ou inativo." class="col-md-1">
                    <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="Ativo">
                        @Html.DisplayNameFor(model => model.Ativo)
                        <span class="sort-icon"></span>
                    </a>
                </th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td data-column="EstadoSigla" title="@item.EstadoSigla">
                        @Html.DisplayFor(modelItem => item.EstadoSigla)
                    </td>
                    <td data-column="EstadoNome" title="@item.EstadoNome">
                        @Html.DisplayFor(modelItem => item.EstadoNome)
                    </td>
                    <td data-column="Pais" title="@item.Pais.PaisNome">
                        @Html.DisplayFor(modelItem => item.Pais.PaisNome)
                    </td>
                    <td data-column="Ativo" title="@item.Ativo">
                        @Html.DisplayFor(modelItem => item.Ativo)
                    </td>
                    <td>
                        @* Botões de ação do TagHelper *@
                        <tagHelperButton ctype-button="Editar" croute-id="@item.EstadoId"></tagHelperButton>
                        <tagHelperButton ctype-button="Detalhes" croute-id="@item.EstadoId"></tagHelperButton>
                        <tagHelperButton ctype-button="Remover" croute-id="@item.EstadoId"></tagHelperButton>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<br />

<div class="d-flex justify-content-end">

    @* Componente de paginação *@
    @await Component.InvokeAsync("Pagination", new { pagina = Convert.ToInt32(ViewData["pagina"]), totalPaginas = Convert.ToInt32(ViewData["totalPaginas"]), itensPorPagina = Convert.ToInt32(ViewData["itensPorPagina"]) })

</div>

<vc:counter model-count="@Model.Count()"></vc:counter>

<div class="alert alert-secondary" role="alert">
    <h5 class="alert-heading">Nota!</h5>
    <i class="fa-solid fa-circle-info"></i> Para efetuar a consulta, basta <b>digitar no campo de busca</b> e clicar em <b>Buscar cliente</b> ou <b>apertar enter</b> no próprio campo.
</div>
