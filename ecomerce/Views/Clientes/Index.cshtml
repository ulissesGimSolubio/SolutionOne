@model IEnumerable<Ecomerce.Models.Cliente>

@{
    @* Variaveis de tela *@

    ViewData["Title"] = "Parceiros de Negócios";
    int itensPorPaginaInt = Convert.ToInt32(ViewData["itensPorPagina"]);
    var paginas = Ecomerce.Extensions.ConfigurationValuesDefaults.Pagination;
    var count = Convert.ToInt32(ViewData["count"]);
    string busca = ViewData["busca"] as string ?? "";
    @* ativos ou não *@
    var ativo = (bool)(ViewData["ativo"] ?? true);
    var msgDelete = TempData["delete"] as string;
    var msgSave = TempData["save"] as string;
    var msgUpdate = TempData["update"] as string;
    var msgDeleteFoto = TempData["delete-foto"] as string;
    
}

<h1><i class="fa-solid fa-business-time"></i> Parceiros de Negócios</h1>

<br />

<a asp-action="Create" class="btn btn-dark"><i class="fa fa-address-card" aria-hidden="true"></i> &nbsp; Novo Parceiro</a>

<br />
<br />

@if (msgDelete != null)
{
    <div id="alert" class="alert alert-danger" role="alert">
        &#128721 @msgDelete
    </div>

    <script>
        // Fecha o alerta após 5 segundos
        setTimeout(function () {
        $('#alert').fadeOut('slow');
        }, 5000);
    </script>
}

@if (msgSave != null || msgUpdate != null || msgDeleteFoto != null)
{
    <div id="alert" class="alert alert-secondary" role="alert">
        <i class="fa-solid fa-check-to-slot"></i> @msgSave@msgUpdate@msgDeleteFoto
    </div>

    <script>
        // Fecha o alerta após 5 segundos
        setTimeout(function () {
            $('#alert').fadeOut('slow');
        }, 5000);
    </script>
}

@* Componente de paginação e pesquisa *@

<div class="d-flex justify-content-end">

    @* Componente de pesquisa *@
    @await Component.InvokeAsync("SearchForm", new { itensPorPagina = itensPorPaginaInt, paginas = paginas, busca = busca, ativo = (bool)(ViewData["ativo"] ?? true) })

</div>

<br />

@* Tabela com os dados *@

<div class="table-responsive">
@* Tabela com os dados *@

    <table class="table">
    <thead>
        <tr>
            <th>
                <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="CpfCnpj">
                    @Html.DisplayNameFor(model => model.CpfCnpj)
                    <span class="sort-icon"></span>
                </a>
            </th>
            <th>
                <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="Nome">
                    @Html.DisplayNameFor(model => model.Nome)
                    <span class="sort-icon"></span>
                </a>
            </th>
            <th>
                <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="Email">
                    @Html.DisplayNameFor(model => model.Email)
                    <span class="sort-icon"></span>
                </a>
            </th>
            <th>
                <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="DataNascimento">
                    @Html.DisplayNameFor(model => model.DataNascimento)
                    <span class="sort-icon"></span>
                </a>
            </th>
            <th>
                Contato
            </th>
            <th>
                Ativo?
            </th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                @{
                    var cpfCnpjFormatado = Ecomerce.Extensions.Helpers.FormatarCpfCnpj(item.CpfCnpj);                   
                }
                <td data-column="CpfCnpj" title="@cpfCnpjFormatado">
                    @cpfCnpjFormatado
                </td>
                <td data-column="Nome" title="Fantasia: @Html.DisplayFor(modelItem => item.Nome) | Razão Soc.: @Html.DisplayFor(modelItem => item.NomeRazaoSoc)">
                    Fantasia: @Html.DisplayFor(modelItem => item.Nome)<br />
                    Razão Soc.: @Html.DisplayFor(modelItem => item.NomeRazaoSoc)
                </td>
                <td data-column="Email" title="@item.Email">
                    @item.Email
                </td>
                <td data-column="DataNascimento" title=" @item.DataNascimento.ToString("dd/MM/yyyy")">
                    @item.DataNascimento.ToString("dd/MM/yyyy")
                </td>
                    @{
                        var cel = Ecomerce.Extensions.Helpers.FormatCellPhone(item.Celular);
                        var phone = Ecomerce.Extensions.Helpers.FormatCellPhone(item.TelefoneFixo);
                    }
                <td title="Cel: @cel | Fixo: @phone">                
                    Cel: @cel<br />
                    Fixo: @phone
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Ativo)
                </td>

                <td>
                    @* Botões de ação do TagHelper *@
                    <tagHelperButton ctype-button="Editar" croute-id="@item.CpfCnpj"></tagHelperButton>
                    <tagHelperButton ctype-button="Detalhes" croute-id="@item.CpfCnpj"></tagHelperButton>
                    <tagHelperButton ctype-button="Remover" croute-id="@item.CpfCnpj"></tagHelperButton>
                </td>
            </tr>
        }
    </tbody>
</table>

</div>

<br />

<div class="d-flex justify-content-end">

    @* Componente de paginação *@
    @await Component.InvokeAsync("Pagination", new { pagina = Convert.ToInt32(ViewData["pagina"]), totalPaginas = Convert.ToInt32(ViewData["totalPaginas"]), itensPorPagina = Convert.ToInt32(ViewData["itensPorPagina"]) })

</div>

<vc:counter model-count="@Model.Count()"></vc:counter>

<div class="alert alert-secondary" role="alert">
    <h5 class="alert-heading">Nota!</h5>
    <i class="fa-solid fa-circle-info"></i> Para efetuar a consulta, basta <b>digitar no campo de busca</b> e clicar em <b>Buscar cliente</b> ou <b>apertar enter</b> no próprio campo.
</div>
