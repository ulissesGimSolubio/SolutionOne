@model IEnumerable<Ecomerce.Models.Pais>

@{
    ViewData["Title"] = "Paises";
    int itensPorPaginaInt = Convert.ToInt32(ViewData["itensPorPagina"]);
    var paginas = Ecomerce.Extensions.ConfigurationValuesDefaults.Pagination;
    var count = Convert.ToInt32(ViewData["count"]);
    string busca = ViewData["busca"] as string ?? "";
    @* ativos ou não *@
    var ativo = (bool)(ViewData["ativo"] ?? true);
    var msgDelete = TempData["delete"] as string;
    var msgSave = TempData["save"] as string;
    var msgUpdate = TempData["update"] as string;
    var exception = TempData["exception"] as string;
}

<h1><i class="fa-solid fa-globe"></i> Paises</h1>

<br />

<a asp-action="Create" title="Efetua o registro de um novo País." class="btn btn-dark"><i class="fa-solid fa-globe" aria-hidden="true"></i> &nbsp; Novo País</a>
<a class="btn btn-dark" asp-area="" title="Efetue o registro de um novo Estado." asp-controller="Estados" asp-action="Index"><i class="fa-solid fa-map"></i> &nbsp; Novo Esatdo</a>

<br />
<br />

@if (msgDelete != null)
{
    <div id="alert" class="alert alert-danger" role="alert">
        &#128721 @msgDelete@exception
    </div>

    <script>
        // Fecha o alerta após 5 segundos
        setTimeout(function () {
            $('#alert').fadeOut('slow');
        }, 5000);
    </script>
}

@if (msgSave != null || msgUpdate != null)
{
    <div id="alert" class="alert alert-secondary" role="alert">
        <i class="fa-solid fa-check-to-slot"></i> @msgSave@msgUpdate
    </div>

    <script>
        // Fecha o alerta após 5 segundos
        setTimeout(function () {
            $('#alert').fadeOut('slow');
        }, 5000);
    </script>
}

@* Componente de paginação e pesquisa *@

<div class="d-flex justify-content-end">

    @* Componente de pesquisa *@
    @await Component.InvokeAsync("SearchForm", new { itensPorPagina = itensPorPaginaInt, paginas = paginas, busca = busca, ativo = (bool)(ViewData["ativo"] ?? true) })

</div>

<br />

@* Tabela com os dados *@

<div class="table-responsive">
    <table class="table table-striped">
    <thead>
        <tr>
            <th title="Nome do País, para reorganizar de A-Z ou Z-A clique no cabeçalho da coluna.">
                <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="PaisNome">
                    @Html.DisplayNameFor(model => model.PaisNome)
                    <span class="sort-icon"></span>
                </a>
            </th>
            <th title="Nome do País em linguagem estrângeira, para reorganizar de A-Z ou Z-A clique no cabeçalho da coluna.">
                <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="PaisNomeIngles">
                    @Html.DisplayNameFor(model => model.PaisNomeIngles)
                    <span class="sort-icon"></span>
                </a>
            </th>
            <th title="Sigla ISO do País, para reorganizar de A-Z ou Z-A clique no cabeçalho da coluna.">
                <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="PaisIsoCodigo">
                    @Html.DisplayNameFor(model => model.PaisIsoCodigo)
                    <span class="sort-icon"></span>
                </a>                
            </th>
            <th title="Código do País de forma mundial, para reorganizar de A-Z ou Z-A clique no cabeçalho da coluna.">
                <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="PaisCodigo">
                    @Html.DisplayNameFor(model => model.PaisCodigo)
                    <span class="sort-icon"></span>
                </a>                
            </th>
            <th title="Moeda utilizada pelo País, para reorganizar de A-Z ou Z-A clique no cabeçalho da coluna.">
                <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="PaisMoeda">
                    @Html.DisplayNameFor(model => model.PaisMoeda)
                    <span class="sort-icon"></span>
                </a>                
            </th>
            <th title="Moeda utilizada pelo País de forma de $, para reorganizar de A-Z ou Z-A clique no cabeçalho da coluna.">
                <i class="fa-solid fa-sort"></i> <a href="#" class="sort-link" data-column="PaisMoedaAbrev">
                    @Html.DisplayNameFor(model => model.PaisMoedaAbrev)
                    <span class="sort-icon"></span>
                </a>                
            </th>
            <th>
                Ativo?
            </th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td data-column="PaisNome" title="@item.PaisNome">
                    @Html.DisplayFor(modelItem => item.PaisNome)
                </td>
                <td data-column="PaisNomeIngles" title="@item.PaisNomeIngles">
                    @Html.DisplayFor(modelItem => item.PaisNomeIngles)
                </td>
                <td data-column="PaisIsoCodigo" title="@item.PaisIsoCodigo">
                    @Html.DisplayFor(modelItem => item.PaisIsoCodigo)
                </td>
                <td data-column="PaisCodigo" title="@item.PaisCodigo">
                    @Html.DisplayFor(modelItem => item.PaisCodigo)
                </td>
                <td data-column="PaisMoeda" title="@item.PaisMoeda">
                    @Html.DisplayFor(modelItem => item.PaisMoeda)
                </td>
                <td data-column="PaisMoedaAbrev" title="@item.PaisMoedaAbrev">
                    @Html.DisplayFor(modelItem => item.PaisMoedaAbrev)
                </td>
                <td data-column="PaisMoedaAbrev">
                    @Html.DisplayFor(modelItem => item.Ativo)
                </td>
                <td>
                    @* Botões de ação do TagHelper *@
                    <tagHelperButton ctype-button="Editar" croute-id="@item.PaisId"></tagHelperButton>
                    <tagHelperButton ctype-button="Detalhes" croute-id="@item.PaisId"></tagHelperButton>
                    <tagHelperButton ctype-button="Remover" croute-id="@item.PaisId"></tagHelperButton>
                </td>
            </tr>
        }
    </tbody>
</table>
</div>


<br />

<div class="d-flex justify-content-end">

    @* Componente de paginação *@
    @await Component.InvokeAsync("Pagination", new { pagina = Convert.ToInt32(ViewData["pagina"]), totalPaginas = Convert.ToInt32(ViewData["totalPaginas"]), itensPorPagina = Convert.ToInt32(ViewData["itensPorPagina"]) })

</div>

<vc:counter model-count="@Model.Count()"></vc:counter>

<div class="alert alert-secondary" role="alert">
    <h5 class="alert-heading">Nota!</h5>
    <i class="fa-solid fa-circle-info"></i> Para efetuar a consulta, basta <b>digitar no campo de busca</b> e clicar em <b>Buscar cliente</b> ou <b>apertar enter</b> no próprio campo.
</div>
